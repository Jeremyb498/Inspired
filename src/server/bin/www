#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const http = require("http");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "4000"); // cause React will serve on 3000 locally
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    console.log("Listening on " + bind);

    /*/Backend Testing 
    var searchAddr = "http://localhost:" + addr.port;
    console.log(searchAddr);

    fetch(searchAddr + "/api/users/")
                .then(res => res.json())
                .then(json => console.log(json));

    fetch(searchAddr + "/api/addUser/Jeremy/password")
        .then(res => res.json())
        .then(async function(profile){

            await fetch(searchAddr + "/api/users/")
                .then(res => res.json())
                .then(json => console.log(json));

            await fetch(searchAddr + "/api/getStars/" + profile.token)
                .then(res => res.json())
                .then(json => console.log(json));

            await fetch(searchAddr + "/api/addStar/" + profile.token + "/273654775")
                .then(res => res.json())
                .then(json => console.log(json));

            await fetch(searchAddr + "/api/getStars/" + profile.token)
                .then(res => res.json())
                .then(json => console.log(json.starred.nonprofits[0].ein));

            await fetch(searchAddr + "/api/addStar/" + profile.token + "/464923885")
                .then(res => res.json())
                .then(json => console.log(json));

            await fetch(searchAddr + "/api/getStars/" + profile.token)
                .then(res => res.json())
                .then(json => console.log(json.starred.nonprofits[1].ein));

            await fetch(searchAddr + "/api/removeStar/" + profile.token + "/273654775")
                .then(res => res.json())
                .then(json => console.log(json));

            await fetch(searchAddr + "/api/getStars/" + profile.token)
                .then(res => res.json())
                .then(json => console.log(json.starred.nonprofits[0].ein));

            await fetch(searchAddr + "/api/addUser/username/abcdefg")
                .then(res => res.json())
                .then(async function(data){

                    await fetch(searchAddr + "/api/users/")
                        .then(res => res.json())
                        .then(json => console.log(json));

                    await fetch(searchAddr + "/api/addStar/" + data.token + "/273654775")
                        .then(res => res.json())
                        .then(json => console.log(json));

                    await fetch(searchAddr + "/api/getStars/" + data.token)
                        .then(res => res.json())
                        .then(json => console.log(json.starred.nonprofits[0].ein));

                    await fetch(searchAddr + "/api/removeUser/" + data.token)
                        .then(res => res.json())
                        .then(json => console.log(json));

                    await fetch(searchAddr + "/api/getStars/" + data.token)
                        .then(res => res.json())
                        .then(json => console.log(json));

                    await fetch(searchAddr + "/api/login/Jeremy/password")
                        .then(res => res.json())
                        .then(async function(info){

                            await fetch(searchAddr + "/api/users/")
                                .then(res => res.json())
                                .then(json => console.log(json));

                            await fetch(searchAddr + "/api/getStars/" + info.token)
                                .then(res => res.json())
                                .then(json => console.log(json.starred.nonprofits[0].ein));

                            await fetch(searchAddr + "/api/listCauses")
                                .then(res => res.json())
                                .then(async function(json){
                                    console.log(json)

                                    await fetch(searchAddr + "/api/searchCause/" + json.causes[0])
                                        .then(res => res.json())
                                        .then(json => console.log(json))

                                    nonprofits = [];

                                    //while (true)
                                    //{
                                        noDuplicate = true;
                                        while (noDuplicate)
                                        {
                                            await fetch(searchAddr + "/api/supriseMe")
                                                .then(res => res.json())
                                                .then(json => {

                                                    noDuplicate = !nonprofits.indexOf(json.ein) >= 0;

                                                    if (!noDuplicate)
                                                    {
                                                        console.log("Duplicate after " + nonprofits.length + "entries");
                                                    } 
                                                    else
                                                    {
                                                        nonprofits.push(json.ein);

                                                        if (nonprofits.length % 100 == 0)
                                                        {
                                                            console.log("Reached " + nonprofits.length + " random Nonprofits.");
                                                        }
                                                    }
                                                })

                                        }

                                        await new Promise(resolve => setTimeout(resolve, 10000));
                                    //}
                                });

                        });

                    

                });

        });

    

    //*/
}


